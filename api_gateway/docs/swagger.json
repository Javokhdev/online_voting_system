{
    "swagger": "2.0",
    "info": {
        "title": "Online Voting System Swagger UI",
        "contact": {}
    },
    "basePath": "/",
    "paths": {
        "/candidate/create": {
            "post": {
                "description": "Endpoint for creating a new candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Create a new candidate",
                "parameters": [
                    {
                        "description": "Candidate creation request payload",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.CreateCandidateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created candidate",
                        "schema": {
                            "$ref": "#/definitions/voting.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/create": {
            "post": {
                "description": "Endpoint for creating a new election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Create a new election",
                "parameters": [
                    {
                        "description": "Election creation request payload",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.CreateElectionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created election",
                        "schema": {
                            "$ref": "#/definitions/voting.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/getall": {
            "get": {
                "description": "Endpoint for getting all elections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Get All Elections",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted elections",
                        "schema": {
                            "$ref": "#/definitions/voting.GetAllElectionRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get elections",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/getbyid": {
            "get": {
                "description": "Endpoint for getting election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Get Election",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully getted election",
                        "schema": {
                            "$ref": "#/definitions/voting.GetElectionRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/update": {
            "put": {
                "description": "Endpoint for updating election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Update election",
                "operationId": "update_election",
                "parameters": [
                    {
                        "description": "Election updaing request payload",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.GetElectionRes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated election",
                        "schema": {
                            "$ref": "#/definitions/voting.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/party/create": {
            "post": {
                "description": "Endpoint for creating a new party\ncreate_party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Create a new party",
                "parameters": [
                    {
                        "description": "Party creation request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/public.CreatePartyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created party",
                        "schema": {
                            "$ref": "#/definitions/public.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/create": {
            "post": {
                "description": "Endpoint for creating a new public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Create a new public",
                "parameters": [
                    {
                        "description": "Public creation request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/public.CreatePublicReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created public",
                        "schema": {
                            "$ref": "#/definitions/public.Void"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "public.CreatePartyReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "public.CreatePublicReq": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                }
            }
        },
        "public.Void": {
            "type": "object"
        },
        "voting.CreateCandidateReq": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "voting.CreateElectionReq": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "voting.GetAllElectionRes": {
            "type": "object",
            "properties": {
                "Elections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/voting.GetElectionRes"
                    }
                }
            }
        },
        "voting.GetElectionRes": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "voting.Void": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "role",
            "in": "header"
        }
    }
}